
import torch
from torch import nn
from audiossl.modules.transformer import Block
from torch.nn import functional as F
from functools import partial
import time
import warnings
import math
from pytorch_lightning import LightningModule
from transformers.optimization import AdamW
from audiossl.utils.common import cosine_scheduler_step,get_params_groups
from torch import nn
import torch
import argparse


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def get_num_patches(height=64,width=1001,patch_height=16,patch_width=16):
    return (height // patch_height) * (width // patch_width)

from einops.layers.torch import Rearrange
class PatchEmbed_v2(nn.Module):
    def __init__(self,patch_height=64,patch_width=4,embed_dim=768,input_dim=1):
        super().__init__()
        self.patch_height = patch_height
        self.patch_width = patch_width
        self.patch_maker = Rearrange('b c (h p1) (w p2) -> b (w h) (p1 p2 c)', p1 = patch_height, p2 = patch_width)
        self.patch_embed = nn.Linear(patch_height*patch_width*input_dim,embed_dim)
        
    def forward(self,melspec,length=None):
        height = melspec.shape[2] - melspec.shape[2]%self.patch_height
        width = melspec.shape[3] - melspec.shape[3]%self.patch_width
        patch = self.patch_maker(melspec[:,:,:height,:width])
        patch_embed = self.patch_embed(patch)

        if length is not None:
            patch_length = (height//self.patch_height) * ((length - length%self.patch_width)//self.patch_width)
        else:
            patch_length = None

        return patch,patch_embed,patch_length


class FrameAST(nn.Module):
    """ Vision Transformer """
    def __init__(self,nprompt=0,spec_h=64,spec_w=1001, patch_w=16,patch_h=16,pos_type="cut", in_chans=1, num_classes=0, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0.,
                 drop_path_rate=0.1, norm_layer=nn.LayerNorm, **kwargs):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim
        self.spec_w = spec_w
        self.spec_h = spec_h
        self.embed_dim = embed_dim
        self.patch_w = patch_w
        self.patch_h = patch_h

        self.pos_type = pos_type


        self.patch_embed = PatchEmbed_v2(patch_h,patch_w,embed_dim)
        self.mask_embed = nn.Parameter(torch.zeros(1,1, self.embed_dim))

        #hack
        self.nprompt=nprompt
        if self.nprompt > 0:
            self.prompt_embed = nn.Parameter(torch.zeros(1,self.nprompt,self.embed_dim))
            trunc_normal_(self.prompt_embed, std=.02)

        num_patches = get_num_patches(spec_h,spec_w,patch_h,patch_w)
        self.num_patches = num_patches


        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm_frame = norm_layer(embed_dim)

        print("Dropout:", drop_rate,"Attn. Dropout:", attn_drop_rate,"Path Dropout:", drop_path_rate)
        trunc_normal_(self.pos_embed, std=.02)
        trunc_normal_(self.mask_embed, std=.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


    def prepare_tokens(self, x, mask_index, length, mask=True):
        B, nc, h, w = x.shape
        mel_patches,x,patch_length = self.patch_embed(x,length)  # patch linear embedding
        B, T, C = x.shape

        if (mask_index is not None) and mask:
            mask_index_expand = mask_index.unsqueeze(2).expand(B,T,self.embed_dim).float()
            x = (1-mask_index_expand) * x + mask_index_expand * self.mask_embed.expand(B,T,C)

        # add positional encoding to each token
        if self.pos_type == "cut":
            pos = self.pos_embed[:,1:T+1,:].expand(B,-1,-1) 
            x = x + pos
        else:
            pos = self.interpolate_pos_encoding(x,h,w)
            x = x + pos[:,1:]

        #pos = self.pos_embed[:,1:T+1,:].expand(B,-1,-1) 
        #x = x + pos

        return self.pos_drop(x),pos,mel_patches,h,w,patch_length

    def forward(self, x, mask_index=None,mask_input=True,length=None):
        x,pos,mel_patches,h,w,patch_length = self.prepare_tokens(x,mask_index,length,mask_input)

        length_mask = torch.arange(mel_patches.shape[1]).to(x.device) < patch_length.unsqueeze(1)
        length_mask = length_mask.to(x.device)
        mask_index = mask_index & length_mask

        if self.nprompt > 0:
            x = torch.cat([self.prompt_embed.expand(x.shape[0],-1,-1),x],dim=1)

        for i,blk in enumerate(self.blocks):
            x = blk(x,patch_length+self.nprompt)

        frame_repr = self.norm_frame(x)


        return frame_repr[:,self.nprompt:][mask_index]
        
    def interpolate_pos_encoding(self, x, h, w):
        npatch = x.shape[1] - 1
        N = self.pos_embed.shape[1] - 1
        if npatch == N and w == self.spec_w and h == self.spec_h:
            return self.pos_embed
        class_pos_embed = self.pos_embed[:, 0]
        patch_pos_embed = self.pos_embed[:, 1:]
        dim = x.shape[-1]
        w0 = w // self.patch_embed.patch_width
        h0 = h // self.patch_embed.patch_height
        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        w0, h0 = w0 + 0.1, h0 + 0.1
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.reshape(1, self.spec_h//self.patch_h, self.spec_w//self.patch_w, dim).permute(0, 3, 1, 2),
            scale_factor=(h0 / (self.spec_h//self.patch_h), w0 / (self.spec_w//self.patch_w)),
            mode='bicubic',
        )
        assert int(h0) == patch_pos_embed.shape[-2] and int(w0) == patch_pos_embed.shape[-1]
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(1, -1, dim)
        return torch.cat((class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1)

    def get_last_selfattention(self, x):
        x,_,_,_,_,_ = self.prepare_tokens(x,mask_index=None,length=None,mask=False)
        atts=[]
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x,att = blk(x,return_attention=True)
                atts.append(att)
            else:
                x,att = blk(x,return_attention=True)
                atts.append(att)
                return atts
                # return attention of the last block

    def get_intermediate_layers(self, x,length, n=1, scene=True):
        x,_,_,_,_,patch_length = self.prepare_tokens(x,mask_index=None,length=length,mask=False)
        # we return the output tokens from the `n` last blocks
        output = []
        if self.nprompt > 0:
            x = torch.cat([self.prompt_embed.expand(x.shape[0],-1,-1),x],dim=1)
        for i,blk in enumerate(self.blocks):
            x = blk(x,patch_length+self.nprompt)
            if len(self.blocks) - i <= n :
                norm_x = self.norm_frame(x)
                if scene:
                    length_mask = torch.arange(x.shape[1]-self.nprompt).to(x.device) < patch_length.unsqueeze(1)
                    avg = torch.sum(norm_x[:,self.nprompt:]*length_mask.unsqueeze(-1),dim=1)/(patch_length.unsqueeze(-1)+1e-6)
                    negative = (~length_mask)*-1e10 
                    #max = torch.max(norm_x[:,self.nprompt:]+negative.unsqueeze(-1),1).values
                    output.append(avg)
                    if self.nprompt>0:
                        output.append(torch.mean(norm_x[:,:self.nprompt],dim=1))
                else:
                    output.append(norm_x[:,self.nprompt:])

        return torch.cat(output,dim=-1)

        
def FrameAST_small(patch_h=64,patch_w=4,**kwargs):
    return FrameAST(patch_h=patch_h,patch_w=patch_w,embed_dim=384,depth=12,num_heads=6,qkv_bias=False,norm_layer=partial(nn.LayerNorm, eps=1e-6),**kwargs)

def FrameAST_base(patch_h=64,patch_w=4,**kwargs):
    return FrameAST(patch_h=patch_h,patch_w=patch_w,embed_dim=768,depth=12,num_heads=12,qkv_bias=False,norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)

def FrameAST_large(patch_h,patch_w,**kwargs):
    return FrameAST(patch_h=patch_h,patch_w=patch_w,embed_dim=1024,depth=24,num_heads=16,qkv_bias=False,norm_layer=partial(nn.LayerNorm, eps=1e-6),**kwargs)


def bool_flag(s):
    """
    Parse boolean arguments from the command line.
    """
    FALSY_STRINGS = {"off", "false", "0"}
    TRUTHY_STRINGS = {"on", "true", "1"}
    if s.lower() in FALSY_STRINGS:
        return False
    elif s.lower() in TRUTHY_STRINGS:
        return True
    else:
        raise argparse.ArgumentTypeError("invalid value for a boolean flag")

class FrameATST(nn.Module):
    def __init__(self,
                 arch="small",
                 symmetric=True,
                 **kwargs):
        super().__init__()
        if arch == "small":
            encoder_fn = FrameAST_small
            embed_dim = 384
        elif arch == "base":
            encoder_fn = FrameAST_base
            embed_dim = 768
        else:
            raise RuntimeError("arch {} is not implemented".format(arch))
        self.symmetric = symmetric
        print("Student")
        self.student=MultiCropWrapper(encoder_fn(**kwargs),
                                      embed_dim,
                                      predictor=True)
        print("Teacher")
        self.teacher=MultiCropWrapper(encoder_fn(**kwargs),
                                      embed_dim,
                                      predictor=False)
        for p in self.teacher.parameters():
            p.requires_grad = False
        self.teacher.load_state_dict({k:v for k,v in self.student.state_dict().items() if "predictor" not in k })
        self.loss_fn = ByolLoss(symmetric=symmetric)
    
    def forward(self,x,length,mask):
        if self.symmetric:
            tea = self.teacher(x,length,mask,False)
            stu = self.student(x,length,mask,True)
            return self.loss_fn(stu,tea)
            #total_loss_frm,total_loss_cls,std_frm_stu,std_frm_tea,std_cls_stu,std_cls_tea =
        else:
            tea = self.teacher(x[:1],length[:1],mask[:1],False)
            stu = self.student(x[1:],length[1:],mask[1:],True)
            return self.loss_fn(stu,tea)
            #total_loss_frm,std_frm_stu,std_frm_tea
    def update_teacher(self,m):
        with torch.no_grad():
            for param_q, param_k in zip(self.student.encoder.parameters(), self.teacher.encoder.parameters()):
                param_k.data.mul_(m).add_((1 - m) * param_q.detach().data)
            for param_q, param_k in zip(self.student.projector.parameters(), self.teacher.projector.parameters()):
                param_k.data.mul_(m).add_((1 - m) * param_q.detach().data)

class FrameATSTLightningModule(LightningModule):
    def __init__(self,
                 arch="base",
                 learning_rate:float=5e-4,
                 warmup_steps=1300,
                 max_steps=39000,
                 ema=0.99,
                 symmetric=True,
                 **kwargs,
                 ):
        super().__init__()
        self.model = FrameATST(arch=arch,
                               symmetric=symmetric,
                               **kwargs)
        self.learning_rate = learning_rate 
        self.warmup_steps =  warmup_steps
        self.max_steps = max_steps
        self.symmetric=symmetric
        self.ema_scheduler= cosine_scheduler_step(ema,1,max_steps,0)
        self.wd_scheduler = cosine_scheduler_step(0.04,0.4,max_steps,0)
        self.mylr_scheduler = cosine_scheduler_step(learning_rate,1e-6,max_steps,warmup_steps)
        self.save_hyperparameters()
    def training_step(self,batch,batch_idx):
        self.schedule()
        (melspecs,lengths,masks),_ = batch
        total_loss_frm,std_frm_stu,std_frm_tea= self.model(melspecs,lengths,masks)
        loss = total_loss_frm
        self.log("loss",loss,prog_bar=True,logger=True)
        self.log("loss_frm",total_loss_frm,prog_bar=True,logger=True)
        self.log("std_frm_tea",std_frm_tea,prog_bar=True,logger=True)
        self.log("std_frm_stu",std_frm_stu,prog_bar=True,logger=True)
        self.log("ema",self.ema_scheduler[self.global_step],prog_bar=True,logger=True)
        self.log("step",self.global_step,prog_bar=True,logger=True)
        
        return loss
    def schedule(self):
        for i, param_group in enumerate(self.trainer.optimizers[0].param_groups):
            param_group["lr"] = self.mylr_scheduler[self.global_step]
            if i == 0:  # only the first group is regularized
                param_group["weight_decay"] = self.wd_scheduler[self.global_step]
        
        self.log("wd",self.wd_scheduler[self.global_step],prog_bar=True,logger=True)
        self.log("lr",param_group["lr"],prog_bar=True,logger=True)

    def configure_optimizers(self):
        optimizer = AdamW(get_params_groups(self.model.student),
                          lr=self.learning_rate,
                          weight_decay=0.)
        return [optimizer]
    def on_train_batch_end(self, outputs, batch, batch_idx: int, unused: int = 0) -> None:
        m = self.ema_scheduler[self.global_step]
        self.model.update_teacher(m)

    @staticmethod
    def add_model_specific_args(parent_parser):
        parser = parent_parser.add_argument_group("FrameATSTModel")
        parser.add_argument("--arch",type=str,default="small")
        parser.add_argument("--symmetric",type=bool_flag,default=True,help="whether to use symemtric loss")
        parser.add_argument("--nprompt",type=int,default=0,help="number of prompts")
        parser.add_argument("--learning_rate", default=0.0005, type=float, help="""Learning rate at the end of
            linear warmup (highest LR used during training). The learning rate is linearly scaled
            with the batch size, and specified here for a reference batch size of 256.""")
        parser.add_argument('--ema', default=0.99, type=float, help="""Base EMA
            parameter for teacher update. The value is increased to 1 during training with cosine schedule.
            """)
        parser.add_argument('--warmup_steps',default=1300,type=int)
        parser.add_argument('--max_steps',default=39010,type=int)
        parser.add_argument('--pos_type',default="cut",type=str)
        return parent_parser



def build_mlp(num_layers, input_dim, mlp_dim, output_dim, last_bn=True):
    mlp = []
    for l in range(num_layers):
        dim1 = input_dim if l == 0 else mlp_dim
        dim2 = output_dim if l == num_layers - 1 else mlp_dim

        mlp.append(nn.Linear(dim1, dim2, bias=False))

        if l < num_layers - 1:
            mlp.append(nn.BatchNorm1d(dim2))
            mlp.append(nn.ReLU(inplace=True))
        elif last_bn:
            # follow SimCLR's design: https://github.com/google-research/simclr/blob/master/model_util.py#L157
            # for simplicity, we further removed gamma in BN
            mlp.append(nn.BatchNorm1d(dim2, affine=False))

    return nn.Sequential(*mlp)

def byol_loss_func(p: torch.Tensor, z: torch.Tensor, simplified: bool = True) :
    """
    Computes BYOL's loss given batch of predicted features p and projected momentum features z.
    Args:
        p (torch.Tensor): NxD Tensor containing predicted features from view 1
        z (torch.Tensor): NxD Tensor containing projected momentum features from view 2
        simplified (bool): faster computation, but with same result. Defaults to True.
    Returns:
        torch.Tensor: BYOL loss.
    """

    if simplified:
        return 2 - 2 * F.cosine_similarity(p, z, dim=-1).mean()

    p = F.normalize(p, dim=-1)
    z = F.normalize(z, dim=-1)

    return 2 - 2 * (p * z).sum(dim=1).mean()
def compute_var(y):
        y = y.view(-1, y.size(-1))
        zc = torch.tensor(y.size(0)).cuda()
        zs = y.sum(dim=0)
        zss = (y ** 2).sum(dim=0)

        torch.distributed.all_reduce(zc)
        torch.distributed.all_reduce(zs)
        torch.distributed.all_reduce(zss)

        var = zss / (zc - 1) - (zs ** 2) / (zc * (zc - 1))
        return torch.sqrt(var + 1e-6)



class ByolLoss(nn.Module):
    def __init__(self,symmetric):
        super().__init__()
        self.symmetric=symmetric
    def forward(self,student,teacher):
        stu_frm=student
        tea_frm=teacher

        std_frm_stu = compute_var(F.normalize(stu_frm,dim=-1)).mean()
        std_frm_tea = compute_var(F.normalize(tea_frm,dim=-1)).mean()

        if self.symmetric:
            stu_frm = stu_frm.chunk(2)
            tea_frm = tea_frm.chunk(2)
            total_loss_frm = 0
            n_loss_terms = 0
            for iq,q in enumerate(tea_frm):
                for iv,v in enumerate(stu_frm):
                    if iq==iv:
                        continue
                    loss = byol_loss_func(q,v,simplified=False)
                    n_loss_terms+=1
                    total_loss_frm += loss
            total_loss_frm /= n_loss_terms

        else:
            total_loss_frm = byol_loss_func(tea_frm,stu_frm)
        return total_loss_frm,std_frm_stu,std_frm_tea



class MultiCropWrapper(nn.Module):
    """
    Perform forward pass separately on each resolution input.
    The inputs corresponding to a single resolution are clubbed and single
    forward is run on the same resolution inputs. Hence we do several
    forward passes = number of different resolutions used. We then
    concatenate all the output features and run the head forward on these
    concatenated features.
    """
    def __init__(self, encoder,
                 embed_dim, 
                 predictor=True):
        super(MultiCropWrapper, self).__init__()
        # disable layers dedicated to ImageNet labels classification
        self.encoder = encoder
        self.projector = build_mlp(2,embed_dim,4096,256,last_bn=False)

        if predictor:
            self.predictor=build_mlp(2,256,4096,256,last_bn=False)
        else: 
            self.predictor=nn.Identity()

    def forward(self, x, length, mask, mask_input):
        # convert to list
        if not isinstance(x, list):
            x = [x]
        idx_crops = torch.cumsum(torch.unique_consecutive(
            torch.tensor([inp.shape[-1] for inp in x]),
            return_counts=True,
        )[1], 0)
        start_idx, output_frame, output_cls = 0,torch.empty(0).to(x[0].device),torch.empty(0).to(x[0].device)

        for end_idx in idx_crops:
            _out_frame = self.encoder(torch.cat(x[start_idx: end_idx]),
                                length=torch.cat(length[start_idx:end_idx]),
                                mask_index=torch.cat(mask[start_idx:end_idx]),
                                mask_input=mask_input
                                )
            # accumulate outputs
            output_frame = torch.cat((output_frame, _out_frame))
            start_idx = end_idx
        # Run the head forward on the concatenated features.
        return self.predictor(self.projector(output_frame))