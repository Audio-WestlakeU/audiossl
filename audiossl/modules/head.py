
from torch  import nn
from audiossl.modules.transformer import Block
import torch
import warnings,math


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class LinearHead(nn.Module):
    """Linear layer
    """
    def __init__(self, dim, num_labels=1000,use_norm=True,affine=False):
        super().__init__()
        self.num_labels = num_labels
        self.use_norm=use_norm
        if use_norm:
            self.norm = nn.BatchNorm1d(dim,affine=affine)
        self.linear = nn.Linear(dim, num_labels)
        self.linear.weight.data.normal_(mean=0.0, std=0.01)
        self.linear.bias.data.zero_()

    def forward(self, x):
        # flatten
        if self.use_norm:
            x = x.unsqueeze(2)
            x = self.norm(x)

        x = x.view(x.size(0), -1)

        # linear layer
        return self.linear(x)

class AttentionHead(nn.Module):
    def __init__(self,dim,att_dim,num_heads,num_labels):
        super().__init__()
        self.pre_linear=nn.Linear(dim,att_dim)
        self.att = Block(att_dim,num_heads)
        self.norm = nn.BatchNorm1d(att_dim,affine=False)
        self.linear = nn.Linear(att_dim, num_labels)
        self.cls_token = nn.Parameter(torch.zeros(1,1,att_dim))
        trunc_normal_(self.cls_token, std=.02)
    def forward(self,x):
        x=self.pre_linear(x)
        cls_token = self.cls_token.expand(x.shape[0],-1,-1)
        x = torch.cat([cls_token,x],dim=1)
        x = self.att(x)[:,0]
        x = x.unsqueeze(2)
        x = self.norm(x)
        x = x.view(x.size(0),-1)
        return self.linear(x)
        
        

